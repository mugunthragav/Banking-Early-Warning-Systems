# Bank Risk Management Dashboard

This is a production-grade **Bank Risk Management Dashboard** built to monitor and analyze banking risks across Credit Risk, Liquidity Risk, Market Risk, and Capital & Compliance. The dashboard is powered by Flask and Dash, providing an interactive, web-based interface with real-time updates, compliant with **Basel III/IV** and **IFRS 9** standards. It supports dynamic threshold adjustments for key metrics (NPL Ratio, LCR, Capital Ratio) and filtering by bank and currency, with professional visualizations (gauges, pie charts, bar charts, and tables) and API endpoints for external integration.

The application uses datasets generated by `generate_data.py` and is designed for banking professionals to monitor risk metrics and ensure regulatory compliance.

## Features
- **Interactive UI**: Adjust thresholds for NPL (30–180 days), LCR (50–150%), and Capital Ratio (4–12%) via sliders, with real-time updates to metrics and visuals.
- **Filters**: Filter data by bank (e.g., Citigroup, HSBC) and currency (e.g., USD, EUR) using dropdowns.
- **Basel III/IV Compliance**:
  - **NPL Ratio**: Calculated using a 90-day default threshold, adjustable via UI.
  - **LCR**: Based on High-Quality Liquid Assets (HQLA) with a 30% runoff rate.
  - **Capital Ratio**: Computed as Capital Amount / RWA, with a configurable threshold (default 8%).
  - **VaR**: 95% Value at Risk for market risk, aggregated from trading book data.
- **IFRS 9 Compliance**: Loan staging (Stage 1: Performing, Stage 2: Significant risk, Stage 3: Credit-impaired) based on days overdue and probability of default.
- **Visualizations**:
  - Gauges for NPL Ratio, LCR, VaR, and Capital Ratio with compliance indicators (teal for compliant, red for breaches).
  - Pie chart for IFRS 9 stage distribution.
  - Bar charts for credit ratings, asset categories, instruments, and counterparty ratings.
  - Paginated tables for detailed portfolio data.
- **API Endpoints**: RESTful endpoints (`/api/npl_ratio`, `/api/lcr`, `/api/capital_ratio`) for external metric calculations.
- **Production-Ready**: Robust error handling, scalable Flask backend, and polished UI with a consistent color scheme (dark blue `#003087`, teal `#0a9396`, red `#d90429`).

## Prerequisites
- **Python**: Version 3.8 or higher.
- **Operating System**: Windows, macOS, or Linux.
- **Virtual Environment**: Recommended to isolate dependencies.
- **Dependencies**:
  - `pandas>=1.5.0`
  - `numpy>=1.23.0`
  - `flask>=2.0.0`
  - `dash>=2.0.0`
  - `plotly>=5.0.0`
  - `python-dateutil>=2.8.0`

## Project Structure
```
EWS-Formula-based-models/
├── src/
│   ├── generate_data.py        # Generates datasets
│   ├── dashboard.py           # Runs the dashboard
│   ├── data/
│   │   ├── credit_risk_data.csv
│   │   ├── liquidity_risk_data.csv
│   │   ├── market_risk_data.csv
│   │   ├── capital_compliance_data.csv
│   └── venv/                  # Virtual environment
└── README.md
```

## Setup Instructions
1. **Clone or Set Up the Project Directory**:
   - Ensure you’re working in `D:\EWS-dashboard\EWS-Formula-based-models\src`.
   - If not already present, create the directory:
     ```bash
     mkdir -p D:\EWS-dashboard\EWS-Formula-based-models\src
     cd D:\EWS-dashboard\EWS-Formula-based-models\src
     ```

2. **Create and Activate a Virtual Environment**:
   - Create a virtual environment:
     ```bash
     python -m venv venv
     ```
   - Activate it (Windows):
     ```bash
     venv\Scripts\activate
     ```

3. **Install Dependencies**:
   - Install required Python packages:
     ```bash
     pip install pandas numpy flask dash plotly python-dateutil
     ```
   - Verify installations:
     ```bash
     pip show pandas numpy flask dash plotly python-dateutil
     ```

4. **Generate Datasets**:
   - Run `generate_data.py` to create the required CSV files:
     ```bash
     python generate_data.py
     ```
   - This generates:
     - `data/credit_risk_data.csv`
     - `data/liquidity_risk_data.csv`
     - `data/market_risk_data.csv`
     - `data/capital_compliance_data.csv`
   - Ensure these files are in `D:\EWS-dashboard\EWS-Formula-based-models\src\data`.

5. **Run the Dashboard**:
   - Ensure `dashboard.py` is in `D:\EWS-dashboard\EWS-Formula-based-models\src`.
   - Start the Flask server:
     ```bash
     python dashboard.py
     ```
   - The dashboard will be available at `http://localhost:8050/dashboard/`.

6. **Access the Dashboard**:
   - Open a web browser (e.g., Chrome, Firefox) and navigate to:
     ```
     http://localhost:8050/dashboard/
     ```
   - If accessing from another device on the same network, use:
     ```
     http://<your-local-ip>:8050/dashboard/
     ```
     (e.g., `http://192.168.1.12:8050/dashboard/`, as shown in your logs).

## Usage
- **Dashboard Interface**:
  - **Configuration Panel**:
    - **Bank Filter**: Select a bank (e.g., Citigroup) or "All Banks".
    - **Currency Filter**: Select a currency (e.g., USD) or "All Currencies".
    - **Threshold Sliders**:
      - NPL Days Overdue (30–180 days, default 90).
      - LCR Minimum Threshold (50–150%, default 100%).
      - Capital Ratio Threshold (4–12%, default 8%).
    - Click **Apply Changes** to update metrics and visuals based on selected filters and thresholds.
  - **Tabs**:
    - **Credit Risk**: View NPL Ratio gauge, IFRS 9 stage pie chart, rating bar chart, and loan portfolio table.
    - **Liquidity Risk**: View LCR gauge, asset category bar chart, and asset portfolio table.
    - **Market Risk**: View VaR gauge, instrument bar chart, and trading book table.
    - **Capital & Compliance**: View Capital Ratio gauge, counterparty rating bar chart, and capital overview table.
  - **Visuals**:
    - Gauges indicate compliance (teal for compliant, red for breaches).
    - Tables are paginated and sortable, showing key portfolio details.
    - Last updated timestamp shows when the dashboard was refreshed.

- **API Endpoints**:
  - Calculate metrics externally using RESTful APIs:
    - **NPL Ratio**:
      ```bash
      curl -X POST "http://localhost:8050/api/npl_ratio" -H "Content-Type: application/json" -d '{"data": [{"Days_Overdue": 100, "Balance": 1000000}, {"Days_Overdue": 10, "Balance": 2000000}], "threshold": 90}'
      ```
      Response: `{"npl_ratio": 33.33333333333333, "threshold": 90}`
    - **LCR**:
      ```bash
      curl -X POST "http://localhost:8050/api/lcr" -H "Content-Type: application/json" -d '{"data": [{"LCR_Compliance": true, "Buffer_Amount": 1000000, "Asset_Amount": 2000000}, {"LCR_Compliance": false, "Buffer_Amount": 500000, "Asset_Amount": 3000000}], "threshold": 100}'
      ```
    - **Capital Ratio**:
      ```bash
      curl -X POST "http://localhost:8050/api/capital_ratio" -H "Content-Type: application/json" -d '{"data": [{"Capital_Amount": 1000000, "RWA": 10000000}, {"Capital_Amount": 2000000, "RWA": 15000000}], "threshold": 8}'
      ```

## Troubleshooting
- **404 Not Found Errors**:
  - Ensure you’re accessing `http://localhost:8050/dashboard/` (not `http://localhost:8050/`).
  - Verify `url_base_pathname='/dashboard/'` in `dashboard.py`.
  - Check that `dashboard.py` is correctly configured with Flask and Dash.

- **FileNotFoundError**:
  - Confirm all CSV files are in `D:\EWS-dashboard\EWS-Formula-based-models\src\data`.
  - Re-run `generate_data.py`:
    ```bash
    python generate_data.py
    ```

- **Port Conflicts**:
  - If port 8050 is in use, edit `dashboard.py` to change the port:
    ```python
    flask_app.run(host="0.0.0.0", port=8051, debug=False)
    ```
  - Access at `http://localhost:8051/dashboard/`.

- **Dependency Issues**:
  - Verify all required packages are installed:
    ```bash
    pip show pandas numpy flask dash plotly python-dateutil
    ```
  - Reinstall if needed:
    ```bash
    pip install --force-reinstall pandas numpy flask dash plotly python-dateutil
    ```

- **Dashboard Not Updating**:
  - Check browser console (F12) for JavaScript errors.
  - Ensure datasets have valid data (e.g., non-zero `Balance` in `credit_risk_data.csv`).
  - Add print statements in `update_dashboard` to debug calculations:
    ```python
    print(f"NPL Ratio: {npl_ratio}, LCR: {lcr}, Capital Ratio: {capital_ratio}")
    ```

- **Metric Discrepancies**:
  - Inspect datasets for integrity:
    ```bash
    python -c "import pandas as pd; print(pd.read_csv('data/credit_risk_data.csv').head())"
    ```
  - Verify metric calculations align with Basel III/IV and IFRS 9 (e.g., 90-day NPL threshold, 30% runoff for LCR).

## Production Deployment
- **Use a WSGI Server**: The Flask development server is not suitable for production. Use Gunicorn or uWSGI:
  ```bash
  pip install gunicorn
  gunicorn -w 4 -b 0.0.0.0:8050 dashboard:flask_app
  ```
- **HTTPS**: Configure a reverse proxy (e.g., Nginx) with SSL for secure access.
- **Logging**: Enable logging in `dashboard.py` for monitoring:
  ```python
  import logging
  logging.basicConfig(filename='dashboard.log', level=logging.INFO)
  ```
- **Scaling**: Deploy on a server with sufficient resources (e.g., 4GB RAM, 2 CPUs) for handling large datasets.

## Contributing
To contribute, fork the repository, make changes, and submit a pull request. Ensure changes align with Basel III/IV and IFRS 9 standards and maintain the dashboard’s interactivity and performance.

## License
This project is licensed under the MIT License.